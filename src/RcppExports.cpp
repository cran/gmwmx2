// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// powerlaw_autocovariance
arma::vec powerlaw_autocovariance(const double kappa, const double sigma2, const int n);
RcppExport SEXP _gmwmx2_powerlaw_autocovariance(SEXP kappaSEXP, SEXP sigma2SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(powerlaw_autocovariance(kappa, sigma2, n));
    return rcpp_result_gen;
END_RCPP
}
// fast_toeplitz_matrix_from_vector_cpp
arma::mat fast_toeplitz_matrix_from_vector_cpp(const arma::vec& v);
RcppExport SEXP _gmwmx2_fast_toeplitz_matrix_from_vector_cpp(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_toeplitz_matrix_from_vector_cpp(v));
    return rcpp_result_gen;
END_RCPP
}
// estimate_p1_p2_mle_cpp
arma::vec estimate_p1_p2_mle_cpp(arma::vec omega);
RcppExport SEXP _gmwmx2_estimate_p1_p2_mle_cpp(SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_p1_p2_mle_cpp(omega));
    return rcpp_result_gen;
END_RCPP
}
// create_vec_theo_autocov_omega_cpp
arma::vec create_vec_theo_autocov_omega_cpp(double p1, double p2, int n);
RcppExport SEXP _gmwmx2_create_vec_theo_autocov_omega_cpp(SEXP p1SEXP, SEXP p2SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(create_vec_theo_autocov_omega_cpp(p1, p2, n));
    return rcpp_result_gen;
END_RCPP
}
// gen_flicker
arma::vec gen_flicker(int N, double sigma);
RcppExport SEXP _gmwmx2_gen_flicker(SEXP NSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_flicker(N, sigma));
    return rcpp_result_gen;
END_RCPP
}
// compute_h_cpp
arma::vec compute_h_cpp(double kappa, int N);
RcppExport SEXP _gmwmx2_compute_h_cpp(SEXP kappaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_h_cpp(kappa, N));
    return rcpp_result_gen;
END_RCPP
}
// vec_mean_autocov_powerlaw
arma::vec vec_mean_autocov_powerlaw(double kappa, int N);
RcppExport SEXP _gmwmx2_vec_mean_autocov_powerlaw(SEXP kappaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_mean_autocov_powerlaw(kappa, N));
    return rcpp_result_gen;
END_RCPP
}
// var_cov_powerlaw_cpp
arma::mat var_cov_powerlaw_cpp(double sigma2, double kappa, int n);
RcppExport SEXP _gmwmx2_var_cov_powerlaw_cpp(SEXP sigma2SEXP, SEXP kappaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(var_cov_powerlaw_cpp(sigma2, kappa, n));
    return rcpp_result_gen;
END_RCPP
}
// compute_power_of_a_base
arma::vec compute_power_of_a_base(int x, int J);
RcppExport SEXP _gmwmx2_compute_power_of_a_base(SEXP xSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_power_of_a_base(x, J));
    return rcpp_result_gen;
END_RCPP
}
// autocovariance_to_wv
arma::vec autocovariance_to_wv(const arma::vec& acf, const arma::vec& tau);
RcppExport SEXP _gmwmx2_autocovariance_to_wv(SEXP acfSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type acf(acfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(autocovariance_to_wv(acf, tau));
    return rcpp_result_gen;
END_RCPP
}
// compute_cov_W_scale_1_cpp
arma::mat compute_cov_W_scale_1_cpp(arma::mat Sigma_X);
RcppExport SEXP _gmwmx2_compute_cov_W_scale_1_cpp(SEXP Sigma_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_X(Sigma_XSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cov_W_scale_1_cpp(Sigma_X));
    return rcpp_result_gen;
END_RCPP
}
// compute_cov_W_all_scales_cpp
Rcpp::List compute_cov_W_all_scales_cpp(arma::mat Sigma_X);
RcppExport SEXP _gmwmx2_compute_cov_W_all_scales_cpp(SEXP Sigma_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_X(Sigma_XSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cov_W_all_scales_cpp(Sigma_X));
    return rcpp_result_gen;
END_RCPP
}
// compute_index_pairs_scales_cpp
arma::mat compute_index_pairs_scales_cpp(int max_j);
RcppExport SEXP _gmwmx2_compute_index_pairs_scales_cpp(SEXP max_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type max_j(max_jSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_index_pairs_scales_cpp(max_j));
    return rcpp_result_gen;
END_RCPP
}
// compute_cov_W_between_scales_all_scales_cpp
Rcpp::List compute_cov_W_between_scales_all_scales_cpp(arma::mat mat_index, int n, Rcpp::List lst_cov_W);
RcppExport SEXP _gmwmx2_compute_cov_W_between_scales_all_scales_cpp(SEXP mat_indexSEXP, SEXP nSEXP, SEXP lst_cov_WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat_index(mat_indexSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type lst_cov_W(lst_cov_WSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cov_W_between_scales_all_scales_cpp(mat_index, n, lst_cov_W));
    return rcpp_result_gen;
END_RCPP
}
// f_jk_cpp
double f_jk_cpp(int h, arma::mat cov_Wj_Wjk, int Mjk, int Mj);
RcppExport SEXP _gmwmx2_f_jk_cpp(SEXP hSEXP, SEXP cov_Wj_WjkSEXP, SEXP MjkSEXP, SEXP MjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_Wj_Wjk(cov_Wj_WjkSEXP);
    Rcpp::traits::input_parameter< int >::type Mjk(MjkSEXP);
    Rcpp::traits::input_parameter< int >::type Mj(MjSEXP);
    rcpp_result_gen = Rcpp::wrap(f_jk_cpp(h, cov_Wj_Wjk, Mjk, Mj));
    return rcpp_result_gen;
END_RCPP
}
// f_jk_approx_cpp
double f_jk_approx_cpp(int h, arma::mat cov_Wj_Wjk, int Mjk, int Mj, std::string approx_type);
RcppExport SEXP _gmwmx2_f_jk_approx_cpp(SEXP hSEXP, SEXP cov_Wj_WjkSEXP, SEXP MjkSEXP, SEXP MjSEXP, SEXP approx_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_Wj_Wjk(cov_Wj_WjkSEXP);
    Rcpp::traits::input_parameter< int >::type Mjk(MjkSEXP);
    Rcpp::traits::input_parameter< int >::type Mj(MjSEXP);
    Rcpp::traits::input_parameter< std::string >::type approx_type(approx_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(f_jk_approx_cpp(h, cov_Wj_Wjk, Mjk, Mj, approx_type));
    return rcpp_result_gen;
END_RCPP
}
// compute_cov_wv_cpp_1
arma::mat compute_cov_wv_cpp_1(Rcpp::List cov_W_j, int J, int n, arma::mat mat_index);
RcppExport SEXP _gmwmx2_compute_cov_wv_cpp_1(SEXP cov_W_jSEXP, SEXP JSEXP, SEXP nSEXP, SEXP mat_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type cov_W_j(cov_W_jSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat_index(mat_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cov_wv_cpp_1(cov_W_j, J, n, mat_index));
    return rcpp_result_gen;
END_RCPP
}
// compute_cov_wv_cpp
arma::mat compute_cov_wv_cpp(arma::mat Sigma_X);
RcppExport SEXP _gmwmx2_compute_cov_wv_cpp(SEXP Sigma_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_X(Sigma_XSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cov_wv_cpp(Sigma_X));
    return rcpp_result_gen;
END_RCPP
}
// compute_l_index_to_compute_cpp
arma::uvec compute_l_index_to_compute_cpp(int Mjk, std::string approx_type);
RcppExport SEXP _gmwmx2_compute_l_index_to_compute_cpp(SEXP MjkSEXP, SEXP approx_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Mjk(MjkSEXP);
    Rcpp::traits::input_parameter< std::string >::type approx_type(approx_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_l_index_to_compute_cpp(Mjk, approx_type));
    return rcpp_result_gen;
END_RCPP
}
// compute_indices
arma::uvec compute_indices(const arma::uvec& all_l_values, const arma::uvec& lst_index_row);
RcppExport SEXP _gmwmx2_compute_indices(SEXP all_l_valuesSEXP, SEXP lst_index_rowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type all_l_values(all_l_valuesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type lst_index_row(lst_index_rowSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_indices(all_l_values, lst_index_row));
    return rcpp_result_gen;
END_RCPP
}
// compute_cov_wv_cpp_approx_faster
arma::mat compute_cov_wv_cpp_approx_faster(arma::mat Sigma_X, std::string approx_type);
RcppExport SEXP _gmwmx2_compute_cov_wv_cpp_approx_faster(SEXP Sigma_XSEXP, SEXP approx_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_X(Sigma_XSEXP);
    Rcpp::traits::input_parameter< std::string >::type approx_type(approx_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cov_wv_cpp_approx_faster(Sigma_X, approx_type));
    return rcpp_result_gen;
END_RCPP
}
// sum_of_powers_of_2
int sum_of_powers_of_2(int from, int to);
RcppExport SEXP _gmwmx2_sum_of_powers_of_2(SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_of_powers_of_2(from, to));
    return rcpp_result_gen;
END_RCPP
}
// get_cov_W_scale_1_from_autocov_cpp_with_treshold
double get_cov_W_scale_1_from_autocov_cpp_with_treshold(int h, const arma::vec autocov_vec, int lag_treshold);
RcppExport SEXP _gmwmx2_get_cov_W_scale_1_from_autocov_cpp_with_treshold(SEXP hSEXP, SEXP autocov_vecSEXP, SEXP lag_tresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type autocov_vec(autocov_vecSEXP);
    Rcpp::traits::input_parameter< int >::type lag_treshold(lag_tresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cov_W_scale_1_from_autocov_cpp_with_treshold(h, autocov_vec, lag_treshold));
    return rcpp_result_gen;
END_RCPP
}
// compute_all_cov_wv_recursive_2_cpp_with_mat
arma::mat compute_all_cov_wv_recursive_2_cpp_with_mat(int n, const arma::vec autocov_vec, int lag_treshold);
RcppExport SEXP _gmwmx2_compute_all_cov_wv_recursive_2_cpp_with_mat(SEXP nSEXP, SEXP autocov_vecSEXP, SEXP lag_tresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type autocov_vec(autocov_vecSEXP);
    Rcpp::traits::input_parameter< int >::type lag_treshold(lag_tresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_all_cov_wv_recursive_2_cpp_with_mat(n, autocov_vec, lag_treshold));
    return rcpp_result_gen;
END_RCPP
}
// compute_autocov_W_j_equal_1_from_autocov_X
arma::vec compute_autocov_W_j_equal_1_from_autocov_X(const arma::vec autocov_vec, int n, int lag_treshold);
RcppExport SEXP _gmwmx2_compute_autocov_W_j_equal_1_from_autocov_X(SEXP autocov_vecSEXP, SEXP nSEXP, SEXP lag_tresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type autocov_vec(autocov_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type lag_treshold(lag_tresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_autocov_W_j_equal_1_from_autocov_X(autocov_vec, n, lag_treshold));
    return rcpp_result_gen;
END_RCPP
}
// compute_all_cov_W_recursive_from_j_2
arma::mat compute_all_cov_W_recursive_from_j_2(int n, arma::vec autocov_W_j_equal_1);
RcppExport SEXP _gmwmx2_compute_all_cov_W_recursive_from_j_2(SEXP nSEXP, SEXP autocov_W_j_equal_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type autocov_W_j_equal_1(autocov_W_j_equal_1SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_all_cov_W_recursive_from_j_2(n, autocov_W_j_equal_1));
    return rcpp_result_gen;
END_RCPP
}
// get_cov_wvar_cpp
double get_cov_wvar_cpp(int j, int k, int n, arma::mat mat_autocov_W);
RcppExport SEXP _gmwmx2_get_cov_wvar_cpp(SEXP jSEXP, SEXP kSEXP, SEXP nSEXP, SEXP mat_autocov_WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat_autocov_W(mat_autocov_WSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cov_wvar_cpp(j, k, n, mat_autocov_W));
    return rcpp_result_gen;
END_RCPP
}
// get_var_wvar_j_from_autcov_W_j_cpp
double get_var_wvar_j_from_autcov_W_j_cpp(int j, int n, arma::vec autocov_W);
RcppExport SEXP _gmwmx2_get_var_wvar_j_from_autcov_W_j_cpp(SEXP jSEXP, SEXP nSEXP, SEXP autocov_WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type autocov_W(autocov_WSEXP);
    rcpp_result_gen = Rcpp::wrap(get_var_wvar_j_from_autcov_W_j_cpp(j, n, autocov_W));
    return rcpp_result_gen;
END_RCPP
}
// get_theo_cov_matrix_wvar_cpp
arma::mat get_theo_cov_matrix_wvar_cpp(int n, Rcpp::Nullable<arma::vec> autocov_vec_X, Rcpp::Nullable<arma::vec> autocov_vec_W, int num_off_diagonal, int lag_treshold);
RcppExport SEXP _gmwmx2_get_theo_cov_matrix_wvar_cpp(SEXP nSEXP, SEXP autocov_vec_XSEXP, SEXP autocov_vec_WSEXP, SEXP num_off_diagonalSEXP, SEXP lag_tresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::vec> >::type autocov_vec_X(autocov_vec_XSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::vec> >::type autocov_vec_W(autocov_vec_WSEXP);
    Rcpp::traits::input_parameter< int >::type num_off_diagonal(num_off_diagonalSEXP);
    Rcpp::traits::input_parameter< int >::type lag_treshold(lag_tresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(get_theo_cov_matrix_wvar_cpp(n, autocov_vec_X, autocov_vec_W, num_off_diagonal, lag_treshold));
    return rcpp_result_gen;
END_RCPP
}
// sum_all_upper_diagonals
arma::vec sum_all_upper_diagonals(const arma::mat& matrix);
RcppExport SEXP _gmwmx2_sum_all_upper_diagonals(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_all_upper_diagonals(matrix));
    return rcpp_result_gen;
END_RCPP
}
// linear_interp_cpp
arma::vec linear_interp_cpp(const arma::uvec& x, const arma::vec& y, const arma::vec& xout);
RcppExport SEXP _gmwmx2_linear_interp_cpp(SEXP xSEXP, SEXP ySEXP, SEXP xoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xout(xoutSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_interp_cpp(x, y, xout));
    return rcpp_result_gen;
END_RCPP
}
// pre_compute_quantities_on_D_only_required_smarter_cpp
Rcpp::List pre_compute_quantities_on_D_only_required_smarter_cpp(const arma::mat& D, std::string approx_type);
RcppExport SEXP _gmwmx2_pre_compute_quantities_on_D_only_required_smarter_cpp(SEXP DSEXP, SEXP approx_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< std::string >::type approx_type(approx_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(pre_compute_quantities_on_D_only_required_smarter_cpp(D, approx_type));
    return rcpp_result_gen;
END_RCPP
}
// compute_all_mean_diag_fast_w_linear_interp_only_required_cpp
arma::vec compute_all_mean_diag_fast_w_linear_interp_only_required_cpp(const arma::mat& mat_D_q_term_1, const arma::mat& mat_D_q_term_2, const arma::vec& sum_on_sub_diag_of_D, const arma::vec& vec_autocov, std::string approx_type);
RcppExport SEXP _gmwmx2_compute_all_mean_diag_fast_w_linear_interp_only_required_cpp(SEXP mat_D_q_term_1SEXP, SEXP mat_D_q_term_2SEXP, SEXP sum_on_sub_diag_of_DSEXP, SEXP vec_autocovSEXP, SEXP approx_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_D_q_term_1(mat_D_q_term_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_D_q_term_2(mat_D_q_term_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sum_on_sub_diag_of_D(sum_on_sub_diag_of_DSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vec_autocov(vec_autocovSEXP);
    Rcpp::traits::input_parameter< std::string >::type approx_type(approx_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_all_mean_diag_fast_w_linear_interp_only_required_cpp(mat_D_q_term_1, mat_D_q_term_2, sum_on_sub_diag_of_D, vec_autocov, approx_type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gmwmx2_powerlaw_autocovariance", (DL_FUNC) &_gmwmx2_powerlaw_autocovariance, 3},
    {"_gmwmx2_fast_toeplitz_matrix_from_vector_cpp", (DL_FUNC) &_gmwmx2_fast_toeplitz_matrix_from_vector_cpp, 1},
    {"_gmwmx2_estimate_p1_p2_mle_cpp", (DL_FUNC) &_gmwmx2_estimate_p1_p2_mle_cpp, 1},
    {"_gmwmx2_create_vec_theo_autocov_omega_cpp", (DL_FUNC) &_gmwmx2_create_vec_theo_autocov_omega_cpp, 3},
    {"_gmwmx2_gen_flicker", (DL_FUNC) &_gmwmx2_gen_flicker, 2},
    {"_gmwmx2_compute_h_cpp", (DL_FUNC) &_gmwmx2_compute_h_cpp, 2},
    {"_gmwmx2_vec_mean_autocov_powerlaw", (DL_FUNC) &_gmwmx2_vec_mean_autocov_powerlaw, 2},
    {"_gmwmx2_var_cov_powerlaw_cpp", (DL_FUNC) &_gmwmx2_var_cov_powerlaw_cpp, 3},
    {"_gmwmx2_compute_power_of_a_base", (DL_FUNC) &_gmwmx2_compute_power_of_a_base, 2},
    {"_gmwmx2_autocovariance_to_wv", (DL_FUNC) &_gmwmx2_autocovariance_to_wv, 2},
    {"_gmwmx2_compute_cov_W_scale_1_cpp", (DL_FUNC) &_gmwmx2_compute_cov_W_scale_1_cpp, 1},
    {"_gmwmx2_compute_cov_W_all_scales_cpp", (DL_FUNC) &_gmwmx2_compute_cov_W_all_scales_cpp, 1},
    {"_gmwmx2_compute_index_pairs_scales_cpp", (DL_FUNC) &_gmwmx2_compute_index_pairs_scales_cpp, 1},
    {"_gmwmx2_compute_cov_W_between_scales_all_scales_cpp", (DL_FUNC) &_gmwmx2_compute_cov_W_between_scales_all_scales_cpp, 3},
    {"_gmwmx2_f_jk_cpp", (DL_FUNC) &_gmwmx2_f_jk_cpp, 4},
    {"_gmwmx2_f_jk_approx_cpp", (DL_FUNC) &_gmwmx2_f_jk_approx_cpp, 5},
    {"_gmwmx2_compute_cov_wv_cpp_1", (DL_FUNC) &_gmwmx2_compute_cov_wv_cpp_1, 4},
    {"_gmwmx2_compute_cov_wv_cpp", (DL_FUNC) &_gmwmx2_compute_cov_wv_cpp, 1},
    {"_gmwmx2_compute_l_index_to_compute_cpp", (DL_FUNC) &_gmwmx2_compute_l_index_to_compute_cpp, 2},
    {"_gmwmx2_compute_indices", (DL_FUNC) &_gmwmx2_compute_indices, 2},
    {"_gmwmx2_compute_cov_wv_cpp_approx_faster", (DL_FUNC) &_gmwmx2_compute_cov_wv_cpp_approx_faster, 2},
    {"_gmwmx2_sum_of_powers_of_2", (DL_FUNC) &_gmwmx2_sum_of_powers_of_2, 2},
    {"_gmwmx2_get_cov_W_scale_1_from_autocov_cpp_with_treshold", (DL_FUNC) &_gmwmx2_get_cov_W_scale_1_from_autocov_cpp_with_treshold, 3},
    {"_gmwmx2_compute_all_cov_wv_recursive_2_cpp_with_mat", (DL_FUNC) &_gmwmx2_compute_all_cov_wv_recursive_2_cpp_with_mat, 3},
    {"_gmwmx2_compute_autocov_W_j_equal_1_from_autocov_X", (DL_FUNC) &_gmwmx2_compute_autocov_W_j_equal_1_from_autocov_X, 3},
    {"_gmwmx2_compute_all_cov_W_recursive_from_j_2", (DL_FUNC) &_gmwmx2_compute_all_cov_W_recursive_from_j_2, 2},
    {"_gmwmx2_get_cov_wvar_cpp", (DL_FUNC) &_gmwmx2_get_cov_wvar_cpp, 4},
    {"_gmwmx2_get_var_wvar_j_from_autcov_W_j_cpp", (DL_FUNC) &_gmwmx2_get_var_wvar_j_from_autcov_W_j_cpp, 3},
    {"_gmwmx2_get_theo_cov_matrix_wvar_cpp", (DL_FUNC) &_gmwmx2_get_theo_cov_matrix_wvar_cpp, 5},
    {"_gmwmx2_sum_all_upper_diagonals", (DL_FUNC) &_gmwmx2_sum_all_upper_diagonals, 1},
    {"_gmwmx2_linear_interp_cpp", (DL_FUNC) &_gmwmx2_linear_interp_cpp, 3},
    {"_gmwmx2_pre_compute_quantities_on_D_only_required_smarter_cpp", (DL_FUNC) &_gmwmx2_pre_compute_quantities_on_D_only_required_smarter_cpp, 2},
    {"_gmwmx2_compute_all_mean_diag_fast_w_linear_interp_only_required_cpp", (DL_FUNC) &_gmwmx2_compute_all_mean_diag_fast_w_linear_interp_only_required_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_gmwmx2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
